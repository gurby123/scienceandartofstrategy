import os
import warnings
import yfinance as yf
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
from pylab import rcParams
rcParams['figure.figsize'] = 10, 7
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMAResults
from pmdarima.arima import auto_arima
from datetime import datetime, timedelta
from sklearn.metrics import mean_squared_error, mean_absolute_error
import math
import streamlit as st
import pmdarima as pm
# Add title and description to Streamlit app
st.title("ARIMA Analysis for Stock Prices")
st.write("This app uses ARIMA modeling to predict stock prices based on historical data.")

# Add interactive widgets to allow users to select stock symbol and time period
symbol = st.sidebar.text_input("Enter stock symbol (e.g. AAPL):", "AAPL")
start_date = st.sidebar.date_input("Select start date:", pd.to_datetime("2010-01-01"))
end_date = datetime.now().date()  # Use today's date as end date

# Retrieve historical stock prices data
df = yf.download(symbol, start=start_date, end=end_date)

ts = df['Adj Close'].resample('D').ffill()
df_log = np.log(ts)
# Split data into training and test sets
train_size = int(len(df_log) * 0.8)
train_data, test_data = df_log[:train_size], df_log[train_size:]

#split data into train and training set
train_data, test_data = df_log[3:int(len(df_log)*0.9)], df_log[int(len(df_log)*0.9):]

fig, ax = plt.subplots()
#ax.figure(figsize=(10,6))
ax.grid(True)
ax.set_xlabel('Dates')
ax.set_ylabel('Log of Closing Prices')
ax.plot(df_log, 'blue', label='Train data')
ax.plot(test_data, 'orange', label='Test data')
ax.legend()
st.pyplot(fig)

train_size = int(len(df_log) * 0.8)
train_data, test_data = ts[:train_size], ts[train_size:]

model = pm.auto_arima(ts, start_p=1, start_q=1,
                      test='adf',       # use adftest to find optimal 'd'
                      max_p=3, max_q=3, # maximum p and q
                      m=1,              # frequency of series
                      d=None,           # let model determine 'd'
                      seasonal=True,   # No Seasonality
                      start_P=0, 
                      D=1, 
                      trace=True,
                      error_action='ignore',  
                      suppress_warnings=True, 
                      stepwise=True,
                      trend=None)

print(model.summary())
model.plot_diagnostics(figsize=(10,8))
st.pyplot()

# Forecast
n_periods = 300
fc, confint = model.predict(n_periods=n_periods, return_conf_int=True)
#index_of_fc = np.arange(len(ts), len(ts)+n_periods)
index_of_fc = pd.date_range(ts.index[-1], periods = n_periods, freq='D')
# make series for plotting purpose
fc_series = pd.Series(fc, index=index_of_fc)
lower_series = pd.Series(confint[:, 0], index=index_of_fc)
upper_series = pd.Series(confint[:, 1], index=index_of_fc)

# Plot
plt.plot(ts)
plt.plot(fc_series, color='darkgreen')
plt.fill_between(lower_series.index, 
                 lower_series, 
                 upper_series, 
                 color='k', alpha=.15)

plt.title("Prediction Chart Next 300 Days")
st.pyplot()
st.write("Price Predictions Next 300 Days", fc)
